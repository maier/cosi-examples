---
- hosts: all
  gather_facts: true
  vars:
    #
    # cosi-server repository URL (only change if testing development version of cosi-server)
    #
    repo_url: "https://github.com/circonus-labs/cosi-server"
    #
    # set to cosi-server tag for release version to install (see <repo_url>/releases)
    # get version checksum from cosi-server_checksums.txt (sha256 signatures) in <repo_url>/releases
    #
    # (see https://github.com/circonus-labs/cosi-server/releases/latest)
    version_tag: v0.5.1
    version_checksum: sha256:104d9e64a6d6dbe4041fdeb6f4e21015a573dfe816c8c8df34f62bf2311dd6e6
    #
    # derived name of tgz to download and install
    #
    install_file: "cosi-server_{{ version_tag|replace('v','') }}_{{ ansible_system|lower }}_x86_64.tar.gz"
    #
    # for example, if version_tag were 0.1.0, the full download URL would be:
    # https://github.com/circonus-labs/cosi-server/releases/download/v0.1.0/cosi-server_0.1.0_linux_x86_64.tar.gz
    #
    download_url: "{{ repo_url }}/releases/download/{{ version_tag }}/{{ install_file }}"
    #
    # set to true to serve agent packages from local cosi-sever (e.g. during dev testing)
    # put the test packages to serve in roles/server/files/packages directory
    # and ensure roles/server/templates/circonus-packages.yaml.j2 reflects the test package names
    #
    local_agent_packages: true
    #
    # version of agent to serve
    #
    # see https://github.com/circonus-labs/circonus-agent/releases/latest
    agent_version: v0.19.1
    #
    # cosi tool settings - the file to redirect the install request to will be
    # dynamically generated based on query arguments sent by the installer (system
    # os type (e.g. linux, freebsd, solaris, etc.), system architecture, etc.)
    #
    # see https://github.com/circonus-labs/cosi-tool/releases/latest
    cosi_tool_version: v0.5.1
    cosi_tool_base_url: "https://github.com/circonus-labs/cosi-tool/releases/download"
  roles:
    - os
    - server
  tasks:
      - name: Deployment Notification
        slack:
          token: "{{ slack_token }}"
          msg: "deployed: cosi server {{ version_tag }} (agent {{ agent_version }}, tool {{ cosi_tool_version }})"
        when: slack_token is defined and slack_token != ""
